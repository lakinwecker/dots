;; Variables
(defpoll local_hour :interval "5s" "scripts/time --local-hour")
(defpoll clock_minute :interval "5s" "scripts/time --local-minute")
(defpoll pr_hour :interval "5s" "scripts/time --pr-hour")
(defpoll utc_hour :interval "5s" "scripts/time --utc-hour")
(defpoll uk_hour :interval "5s" "scripts/time --uk-hour")
(defpoll fr_hour :interval "5s" "scripts/time --fr-hour")
(defpoll clock_date :interval "5s" "scripts/time --local-date")
(defpoll calendar_day :interval "5s" "date '+%d'")
(defpoll calendar_year :interval "5s" "date '+%Y'")
(defpoll volume_percent :interval "5s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent :interval "5s" "light")
(defpoll battery :interval "15s" "scripts/battery --bat")
(defpoll battery_status :interval "1m" "scripts/battery --bat-st")
(defpoll memory :interval "15s" "scripts/memory")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
(defpoll COL_WLAN :interval "1m" "scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "1m" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1m" "scripts/wifi --ICON")
(defpoll song :interval "2s"  "scripts/music_info --song")
(defpoll song_artist :interval "2s"  "scripts/music_info --artist")
(defpoll current_status :interval "1s"  "scripts/music_info --time")
(defpoll song_status :interval "2s"  "scripts/music_info --status")
(defpoll cover_art :interval "2s"  "scripts/music_info --cover")
(deflisten workspace "scripts/workspace")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar time_rev false)
(defvar eww "/usr/bin/eww")


;; widgets

(defwidget workspaces []
  (literal 
    :content workspace))

(defwidget music [] 
  (eventbox
    :onhover "${eww} update music_reveal=true"
    :onhoverlost "${eww} update music_reveal=false"
    (box 
        :class "module-2"
        :orientation "h"
        :space-evenly "false"
        :vexpand "false"
        :hexpand "false" 
        (box 
            :class "song_cover_art"
            :vexpand "false"
            :hexpand "false"
            :style "background-image: url('${cover_art}');")
        (button
            :class "song"
            :wrap "true"
            :onclick "scripts/pop music" song)
        (revealer 
            :transition "slideright"
            :reveal music_reveal
            :duration "350ms"
        (box 
            :vexpand "false"
            :hexpand "false"
            :orientation "h" 
            (button
                :class "song_btn_prev"
                :onclick "scripts/music_info --prev" "")
                    (button 
                        :class "song_btn_play"
                        :onclick "scripts/music_info --toggle" song_status)
                    (button 
                        :class "song_btn_next"
                        :onclick "scripts/music_info --next" "")
                )))))


(defwidget bright []
  (eventbox
    :onhover "${eww} update br_reveal=true" 
    :onhoverlost "${eww} update br_reveal=false"
    (box 
        :class "module" 
        :space-evenly "false" 
        :orientation "h" 
        :spacing "3" 
        (revealer 
            :transition "slideright"
            :reveal br_reveal
            :duration "350ms"
            (scale    :class "brightbar"
                :value brightness_percent
                :orientation "h"
                :tooltip "${brightness_percent}%"
                :max 100
                :min 1
                :onchange "light -S {}" ))
        (label
            :text ""
            :class "bright_icon"
            :tooltip "brightness"))))

(defwidget volume []
  (eventbox 
    :onhover "${eww} update vol_reveal=true"
    :onhoverlost "${eww} update vol_reveal=false"
    (box
        :class "module-2"
        :space-evenly "false"
        :orientation "h"
        :spacing "3" 
            (revealer 
                :transition "slideright"
                :reveal vol_reveal
                :duration "350ms"
                (scale  
                    :class "volbar"
                    :value volume_percent
                    :orientation "h"
                    :tooltip "${volume_percent}%"
                    :max 100
                    :min 0
                    :onchange "amixer -D pulse sset Master {}%" ))
            (button
                :onclick "scripts/pop audio"
                :class "volume_icon"
                "墳"))))

(defwidget wifi [] 
  (eventbox 
    :onhover "${eww} update wifi_rev=true"
    :onhoverlost "${eww} update wifi_rev=false"
    (box
        :vexpand "false"
        :hexpand "false"
        :space-evenly "false"
        (revealer 
            :transition "slideright"
            :reveal wifi_rev
            :duration "350ms"
            (label
                :class "module_essid"
                :text ESSID_WLAN
                :orientation "h"
              ))
        (button
            :class "module-wif"
            :onclick "networkmanager_dmenu"
            :wrap "false" 
            :limit-width 12 WLAN_ICON))))

(defwidget bat []
        (box
            :class "bat_module"
            :vexpand "false"
            :hexpand "false" 
            (circular-progress
                :value battery
                :class "batbar"
                :thickness 1
                (button 
                    :class "iconbat"
                    :limit-width 2
                    :tooltip "battery on ${battery}%"
                    :show_truncated false
                    :onclick "scripts/pop system"
                    :wrap false
                    {battery_status == "Discharging" ? "" : "⚡"}))))

(defwidget mem []
        (box :class "mem_module" :vexpand "false" :hexpand "false" 
            (circular-progress :value memory
                :class "membar"
                :thickness 1
                (button 
                    :class "iconmem"
                    :limit-width 2
                    :tooltip "using ${memory}% ram"
                    :onclick "scripts/pop system"
                    :show_truncated false
                    :wrap false
                    ""))))

(defwidget hour [text class]
  (label
      :text text
      :class "clock_time_class ${class}"))

(defwidget hour_sep [text]
  (label
    :text text
    :valign "center"
    :class "hour_sep" ))

(defwidget clock_module []
  (eventbox
      :onhover "${eww} update time_rev=true"
      :onhoverlost "${eww} update time_rev=false"
      (box
          :class "module"
          :space-evenly "false"
          :orientation "h"
          :spacing "0" 
          :class "time-stuff"
          (hour :text local_hour :class "local")
          (label :text ":" :valign "center" :class "min_sep" )
          (label :text clock_minute :class "clock_minute_class")
          (hour_sep :text "(")
          (hour :text pr_hour :class "pr")
          (hour_sep :text "|")
          (hour :text utc_hour :class "utc")
          (hour_sep :text "|")
          (hour :text uk_hour :class "uk")
          (hour_sep :text "|")
          (hour :text fr_hour :class "fr")
          (hour_sep :text ")")
          (revealer :transition "slideleft"
            :reveal time_rev
            :duration "350ms"
              (button 
                  :class "clock_date_class"
                  :onclick "scripts/pop calendar" clock_date)))))

  
(defwidget sep []
  (box 
    :class "module-2"
    :vexpand "false"
    :hexpand "false"
    (label
        :class "separ"
        :text "|")))

(defwidget gap []
  (box 
    :orientation "h"
    :hexpand "false"
    :visible "true"
    :width "150"))


;;define widget groups
(defwidget left []
    (box 
        :orientation "h" 
        :space-evenly false  
        :halign "start"
        :class "left_modules"
    (workspaces)))
(defwidget center []
    (box :orientation "h" 
         :space-evenly false  
         :halign "center"
         :class "center_modules"
    (music)))
(defwidget right []
    (box
        :orientation "h" 
        :space-evenly false  
        :halign "end"
        :class "right_modules"
    (bright)
    (volume)
    (wifi)
    (sep)
    (bat)
    (mem)
    (sep)
    (clock_module)
))

;;Define bar
(defwidget bar_layout []
  (centerbox 
    :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
    ))

(defwindow bar
    :exclusive true
    :monitor 0
    :geometry (geometry 
        :x "2px"
        :y "2px"
        :width "1724px"
        :height "10px"
        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    (bar_layout))
(defwindow bar2
    :exclusive false
    :monitor 0
    :geometry (geometry 
        :x "15px"
        :y "9px"
        :width "99%"
        :height "30px"
        :anchor "top center")
    :stacking "bg"
    :windowtype "dock"
    (bar_layout))





;;  Music Pop-Up
(defwidget music_pop []
    (box 
        :class "music_pop" 
        :orientation "h"
        :space-evenly "false"
        :vexpand "false"
        :hexpand "false"
        (box 
            :class "music_cover_art"
            :vexpand "false"
            :hexpand "false"
            :style "background-image: url('${cover_art}');")
        (box 
            :orientation "v"
            :spacing 20 
            :space-evenly "false"
            :vexpand "false"
            :hexpand "false"
            (label
                :halign "center"
                :class "music"
                :wrap "true"
                :limit-width 13
                :text song)
            (label
                :halign "center"
                :class "music_artist"
                :wrap "true" 
                :limit-width 15 
                :text song_artist)
            (box 
                :orientation "h"
                :spacing 15 
                :halign "center"
                :space-evenly "false"
                :vexpand "false"
                :hexpand "false"
                (button
                    :class "music_btn_prev"
                    :onclick "scripts/music_info --prev" "")
                (button
                    :class "music_btn_play"
                    :onclick "scripts/music_info --toggle" song_status)
                (button
                    :class "music_btn_next"
                    :onclick "scripts/music_info --next" ""))
            (box 
                :class "music_bar"
                :halign "center"
                :vexpand "false"
                :hexpand "false"
                :space-evenly "false"
                (scale
                    :onscroll "mpc -q seek {}"
                    :min 0 
                    :active "true"
                    :max 100 
                    :value current_status)
                    ))))
(defwindow music_win 
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry 
        :x "0" 
        :y "7%" 
        :width 428 
        :height 104 
        :anchor "top center")
    (music_pop))



(defwidget audio []
    (box 
        :class "audio-box"
        :orientation "v"
        :space-evenly "false"
        :vexpand "false"
        :hexpand "false"
        (box 
            :halign "v"
            :space-evenly "false"
            :hexpand "false"
            :vexpand "false"
            (box 
                :class "speaker_icon"
                :orientation "v")
            (box 
                :orientation "v"
                :halign "center"
                :vexpand "false"
                :hexpand "false"
                (label
                    :class "speaker_text"
                    :text "speaker"
                    :valign "center"
                    :halign "left" )
                (box
                    :class "speaker_bar"
                    :halign "center"
                    :vexpand "false"
                    :hexpand "false"
                    (scale
                        :value volume_percent
                        :space-evenly "false"
                        :orientation "h"
                        :onchange "amixer -D pulse sset Master {}%" 
                        :tooltip "volume on ${volume_percent}%"
                        :max 100
                        :min 0))))
        (label
            :text "_____________________________________"
            :class "audio_sep"
            :halign "center")
        (box 
            :halign "v"
            :space-evenly "false"
            :hexpand "false"
            :vexpand "false"
            (box 
                :class "mic_icon"
                :orientation "v")
                (box 
                    :orientation "v"
                    :halign "center"
                    :vexpand "false"
                    :hexpand "false"
                    (label
                        :class "mic_text"
                        :text "mic"
                        :valign "center"
                        :halign "left" )
                    (box 
                        :class "mic_bar"
                        :halign "center"
                        :vexpand "false"
                        :hexpand "false"
                        (scale
                            :value mic_percent
                            :space-evenly "false"
                            :orientation "h"
                            :tooltip "mic on ${mic_percent}%"
                            :onchange "amixer -D pulse sset Capture {}%" 
                            :max 100
                            :min 0))))))
(defwindow audio_ctl
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry 
        :x "20" 
        :y "7%" 
        :anchor "top right"
        :width "280px" 
        :height "60px")
    (audio))


;;Define System widget  
(defwidget system []
  (box 
    :class "sys_win"
    :orientation "v"
    :space-evenly "false"
    :hexpand "false"
    :vexpand "false"
    :spacing 0
    (box 
        :class "sys_bat_box"
        :orientation "h"
        :space-evenly "false"
        (circular-progress
            :value battery
            :class "sys_bat"
            :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
        (box 
            :orientation "v" 
            :space-evenly "false" 
            :spacing 0 
            :hexpand "false"
            :vexpand "false"
            (label
                :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
    (label
        :text "____________________________________"
        :class "sys_sep"
        :halign "center")
    (box 
        :class "sys_mem_box"
        :orientation "h"
        :space-evenly "false"
        :halign "start"
        (circular-progress
            :value memory
            :class "sys_mem"
            :thickness 9
            (label
                :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
        (box
            :orientation "v"
            :space-evenly "false"
            :spacing 0
            :hexpand "false"
            :vexpand "false"
            (label
                :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label
                :text "${memory_used_mb} / ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            ))))
(defwindow system
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry
            :x "20" 
            :y "7%" 
            :anchor "top right"
            :width "290px" 
            :height "120px")
    (system))



;;Calendar Widget
(defwidget cal []
    (box 
        :class "cal"
        :orientation "v"
        (box
            :class "cal-in"
            (calendar
              :day calendar_day 
              :year calendar_year))))
(defwindow calendar
    :stacking "fg"
    :focusable "false"
    :screen 1
    :monitor 0
    :geometry (geometry
        :x "20" 
        :y "7%" 
        :anchor "top right"
        :width "270px" 
        :height "60px")
(cal))
